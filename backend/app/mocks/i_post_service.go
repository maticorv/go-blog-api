// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	data "blog-api/data"

	mock "github.com/stretchr/testify/mock"
)

// IPostService is an autogenerated mock type for the IPostService type
type IPostService struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: post
func (_m *IPostService) CreatePost(post data.Post) (*data.Post, error) {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *data.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(data.Post) (*data.Post, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(data.Post) *data.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(data.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: id
func (_m *IPostService) DeletePost(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPost provides a mock function with given fields: id
func (_m *IPostService) GetPost(id int) (*data.Post, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *data.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*data.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *data.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: title, userID, id
func (_m *IPostService) GetPosts(title string, userID int, id int) (*[]data.Post, error) {
	ret := _m.Called(title, userID, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 *[]data.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) (*[]data.Post, error)); ok {
		return rf(title, userID, id)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) *[]data.Post); ok {
		r0 = rf(title, userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]data.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(title, userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: id, post
func (_m *IPostService) UpdatePost(id int, post data.Post) (*data.Post, error) {
	ret := _m.Called(id, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *data.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int, data.Post) (*data.Post, error)); ok {
		return rf(id, post)
	}
	if rf, ok := ret.Get(0).(func(int, data.Post) *data.Post); ok {
		r0 = rf(id, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int, data.Post) error); ok {
		r1 = rf(id, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPostService creates a new instance of IPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPostService {
	mock := &IPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
