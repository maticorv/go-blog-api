// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	data "blog-api/data"

	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: album
func (_m *IUserService) CreateUser(album data.User) (*data.User, error) {
	ret := _m.Called(album)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(data.User) (*data.User, error)); ok {
		return rf(album)
	}
	if rf, ok := ret.Get(0).(func(data.User) *data.User); ok {
		r0 = rf(album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.User)
		}
	}

	if rf, ok := ret.Get(1).(func(data.User) error); ok {
		r1 = rf(album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *IUserService) DeleteUser(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *IUserService) GetUser(id int) (*data.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*data.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *data.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: title, userID, id
func (_m *IUserService) GetUsers(title string, userID int, id int) (*[]data.User, error) {
	ret := _m.Called(title, userID, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *[]data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) (*[]data.User, error)); ok {
		return rf(title, userID, id)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) *[]data.User); ok {
		r0 = rf(title, userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]data.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(title, userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, album
func (_m *IUserService) UpdateUser(id int, album data.User) (*data.User, error) {
	ret := _m.Called(id, album)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *data.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, data.User) (*data.User, error)); ok {
		return rf(id, album)
	}
	if rf, ok := ret.Get(0).(func(int, data.User) *data.User); ok {
		r0 = rf(id, album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, data.User) error); ok {
		r1 = rf(id, album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
